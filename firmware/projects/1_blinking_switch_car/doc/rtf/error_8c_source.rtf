{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
error.c\par \pard\plain 
{\tc\tcl2 \v C:/Users/carme/OneDrive/Desktop/cuarto/Electronica Programable/Repositorios/Dominguez_2C_2025/firmware/projects/1_blinking_switch_car/build/esp-idf/mbedtls/mbedtls/library/error.c}
{\xe \v C:/Users/carme/OneDrive/Desktop/cuarto/Electronica Programable/Repositorios/Dominguez_2C_2025/firmware/projects/1_blinking_switch_car/build/esp-idf/mbedtls/mbedtls/library/error.c}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Ir a la documentación de este archivo.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*}\par
00002 {\cf20  *  Error message information}\par
00003 {\cf20  *}\par
00004 {\cf20  *  Copyright The Mbed TLS Contributors}\par
00005 {\cf20  *  SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later}\par
00006 {\cf20  */}\par
00007 \par
00008 {\cf21 #include "common.h"}\par
00009 \par
00010 {\cf21 #include "mbedtls/error.h"}\par
00011 \par
00012 {\cf21 #if defined(MBEDTLS_ERROR_C) || defined(MBEDTLS_ERROR_STRERROR_DUMMY)}\par
00013 \par
00014 {\cf21 #if defined(MBEDTLS_ERROR_C)}\par
00015 \par
00016 {\cf21 #include "mbedtls/platform.h"}\par
00017 \par
00018 {\cf21 #include <stdio.h>}\par
00019 {\cf21 #include <string.h>}\par
00020 \par
00021 {\cf21 #if defined(MBEDTLS_AES_C)}\par
00022 {\cf21 #include "mbedtls/aes.h"}\par
00023 {\cf21 #endif}\par
00024 \par
00025 {\cf21 #if defined(MBEDTLS_ARIA_C)}\par
00026 {\cf21 #include "mbedtls/aria.h"}\par
00027 {\cf21 #endif}\par
00028 \par
00029 {\cf21 #if defined(MBEDTLS_ASN1_PARSE_C)}\par
00030 {\cf21 #include "mbedtls/asn1.h"}\par
00031 {\cf21 #endif}\par
00032 \par
00033 {\cf21 #if defined(MBEDTLS_BASE64_C)}\par
00034 {\cf21 #include "mbedtls/base64.h"}\par
00035 {\cf21 #endif}\par
00036 \par
00037 {\cf21 #if defined(MBEDTLS_BIGNUM_C)}\par
00038 {\cf21 #include "mbedtls/bignum.h"}\par
00039 {\cf21 #endif}\par
00040 \par
00041 {\cf21 #if defined(MBEDTLS_CAMELLIA_C)}\par
00042 {\cf21 #include "mbedtls/camellia.h"}\par
00043 {\cf21 #endif}\par
00044 \par
00045 {\cf21 #if defined(MBEDTLS_CCM_C)}\par
00046 {\cf21 #include "mbedtls/ccm.h"}\par
00047 {\cf21 #endif}\par
00048 \par
00049 {\cf21 #if defined(MBEDTLS_CHACHA20_C)}\par
00050 {\cf21 #include "mbedtls/chacha20.h"}\par
00051 {\cf21 #endif}\par
00052 \par
00053 {\cf21 #if defined(MBEDTLS_CHACHAPOLY_C)}\par
00054 {\cf21 #include "mbedtls/chachapoly.h"}\par
00055 {\cf21 #endif}\par
00056 \par
00057 {\cf21 #if defined(MBEDTLS_CIPHER_C)}\par
00058 {\cf21 #include "mbedtls/cipher.h"}\par
00059 {\cf21 #endif}\par
00060 \par
00061 {\cf21 #if defined(MBEDTLS_CTR_DRBG_C)}\par
00062 {\cf21 #include "mbedtls/ctr_drbg.h"}\par
00063 {\cf21 #endif}\par
00064 \par
00065 {\cf21 #if defined(MBEDTLS_DES_C)}\par
00066 {\cf21 #include "mbedtls/des.h"}\par
00067 {\cf21 #endif}\par
00068 \par
00069 {\cf21 #if defined(MBEDTLS_DHM_C)}\par
00070 {\cf21 #include "mbedtls/dhm.h"}\par
00071 {\cf21 #endif}\par
00072 \par
00073 {\cf21 #if defined(MBEDTLS_ECP_C)}\par
00074 {\cf21 #include "mbedtls/ecp.h"}\par
00075 {\cf21 #endif}\par
00076 \par
00077 {\cf21 #if defined(MBEDTLS_ENTROPY_C)}\par
00078 {\cf21 #include "mbedtls/entropy.h"}\par
00079 {\cf21 #endif}\par
00080 \par
00081 {\cf21 #if defined(MBEDTLS_ERROR_C)}\par
00082 {\cf21 #include "mbedtls/error.h"}\par
00083 {\cf21 #endif}\par
00084 \par
00085 {\cf21 #if defined(MBEDTLS_PLATFORM_C)}\par
00086 {\cf21 #include "mbedtls/platform.h"}\par
00087 {\cf21 #endif}\par
00088 \par
00089 {\cf21 #if defined(MBEDTLS_GCM_C)}\par
00090 {\cf21 #include "mbedtls/gcm.h"}\par
00091 {\cf21 #endif}\par
00092 \par
00093 {\cf21 #if defined(MBEDTLS_HKDF_C)}\par
00094 {\cf21 #include "mbedtls/hkdf.h"}\par
00095 {\cf21 #endif}\par
00096 \par
00097 {\cf21 #if defined(MBEDTLS_HMAC_DRBG_C)}\par
00098 {\cf21 #include "mbedtls/hmac_drbg.h"}\par
00099 {\cf21 #endif}\par
00100 \par
00101 {\cf21 #if defined(MBEDTLS_LMS_C)}\par
00102 {\cf21 #include "mbedtls/lms.h"}\par
00103 {\cf21 #endif}\par
00104 \par
00105 {\cf21 #if defined(MBEDTLS_MD_C)}\par
00106 {\cf21 #include "mbedtls/md.h"}\par
00107 {\cf21 #endif}\par
00108 \par
00109 {\cf21 #if defined(MBEDTLS_NET_C)}\par
00110 {\cf21 #include "mbedtls/net_sockets.h"}\par
00111 {\cf21 #endif}\par
00112 \par
00113 {\cf21 #if defined(MBEDTLS_OID_C)}\par
00114 {\cf21 #include "mbedtls/oid.h"}\par
00115 {\cf21 #endif}\par
00116 \par
00117 {\cf21 #if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)}\par
00118 {\cf21 #include "mbedtls/pem.h"}\par
00119 {\cf21 #endif}\par
00120 \par
00121 {\cf21 #if defined(MBEDTLS_PK_C)}\par
00122 {\cf21 #include "mbedtls/pk.h"}\par
00123 {\cf21 #endif}\par
00124 \par
00125 {\cf21 #if defined(MBEDTLS_PKCS12_C)}\par
00126 {\cf21 #include "mbedtls/pkcs12.h"}\par
00127 {\cf21 #endif}\par
00128 \par
00129 {\cf21 #if defined(MBEDTLS_PKCS5_C)}\par
00130 {\cf21 #include "mbedtls/pkcs5.h"}\par
00131 {\cf21 #endif}\par
00132 \par
00133 {\cf21 #if defined(MBEDTLS_PKCS7_C)}\par
00134 {\cf21 #include "mbedtls/pkcs7.h"}\par
00135 {\cf21 #endif}\par
00136 \par
00137 {\cf21 #if defined(MBEDTLS_POLY1305_C)}\par
00138 {\cf21 #include "mbedtls/poly1305.h"}\par
00139 {\cf21 #endif}\par
00140 \par
00141 {\cf21 #if defined(MBEDTLS_RSA_C)}\par
00142 {\cf21 #include "mbedtls/rsa.h"}\par
00143 {\cf21 #endif}\par
00144 \par
00145 {\cf21 #if defined(MBEDTLS_SHA1_C)}\par
00146 {\cf21 #include "mbedtls/sha1.h"}\par
00147 {\cf21 #endif}\par
00148 \par
00149 {\cf21 #if defined(MBEDTLS_SHA256_C)}\par
00150 {\cf21 #include "mbedtls/sha256.h"}\par
00151 {\cf21 #endif}\par
00152 \par
00153 {\cf21 #if defined(MBEDTLS_SHA3_C)}\par
00154 {\cf21 #include "mbedtls/sha3.h"}\par
00155 {\cf21 #endif}\par
00156 \par
00157 {\cf21 #if defined(MBEDTLS_SHA512_C)}\par
00158 {\cf21 #include "mbedtls/sha512.h"}\par
00159 {\cf21 #endif}\par
00160 \par
00161 {\cf21 #if defined(MBEDTLS_SSL_TLS_C)}\par
00162 {\cf21 #include "mbedtls/ssl.h"}\par
00163 {\cf21 #endif}\par
00164 \par
00165 {\cf21 #if defined(MBEDTLS_THREADING_C)}\par
00166 {\cf21 #include "mbedtls/threading.h"}\par
00167 {\cf21 #endif}\par
00168 \par
00169 {\cf21 #if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)}\par
00170 {\cf21 #include "mbedtls/x509.h"}\par
00171 {\cf21 #endif}\par
00172 \par
00173 \par
00174 {\cf17 const} {\cf18 char} *mbedtls_high_level_strerr({\cf18 int} error_code)\par
00175 \{\par
00176     {\cf18 int} high_level_error_code;\par
00177 \par
00178     {\cf19 if} (error_code < 0) \{\par
00179         error_code = -error_code;\par
00180     \}\par
00181 \par
00182     {\cf20 /* Extract the high-level part from the error code. */}\par
00183     high_level_error_code = error_code & 0xFF80;\par
00184 \par
00185     {\cf19 switch} (high_level_error_code) \{\par
00186     {\cf20 /* Begin Auto-Generated Code. */}\par
00187 {\cf21     #if defined(MBEDTLS_CIPHER_C)}\par
00188         {\cf19 case} -(MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE):\par
00189             return( {\cf22 "CIPHER - The selected feature is not available"} );\par
00190         {\cf19 case} -(MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA):\par
00191             {\cf19 return}( {\cf22 "CIPHER - Bad input parameters"} );\par
00192         {\cf19 case} -(MBEDTLS_ERR_CIPHER_ALLOC_FAILED):\par
00193             {\cf19 return}( {\cf22 "CIPHER - Failed to allocate memory"} );\par
00194         {\cf19 case} -(MBEDTLS_ERR_CIPHER_INVALID_PADDING):\par
00195             {\cf19 return}( {\cf22 "CIPHER - Input data contains invalid padding and is rejected"} );\par
00196         {\cf19 case} -(MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED):\par
00197             {\cf19 return}( {\cf22 "CIPHER - Decryption of block requires a full block"} );\par
00198         {\cf19 case} -(MBEDTLS_ERR_CIPHER_AUTH_FAILED):\par
00199             {\cf19 return}( {\cf22 "CIPHER - Authentication failed (for AEAD modes)"} );\par
00200         {\cf19 case} -(MBEDTLS_ERR_CIPHER_INVALID_CONTEXT):\par
00201             {\cf19 return}( {\cf22 "CIPHER - The context is invalid. For example, because it was freed"} );\par
00202 {\cf21 #endif }{\cf20 /* MBEDTLS_CIPHER_C */}{\cf21 }\par
00203 \par
00204 {\cf21 #if defined(MBEDTLS_DHM_C)}\par
00205         {\cf19 case} -(MBEDTLS_ERR_DHM_BAD_INPUT_DATA):\par
00206             {\cf19 return}( {\cf22 "DHM - Bad input parameters"} );\par
00207         {\cf19 case} -(MBEDTLS_ERR_DHM_READ_PARAMS_FAILED):\par
00208             {\cf19 return}( {\cf22 "DHM - Reading of the DHM parameters failed"} );\par
00209         {\cf19 case} -(MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED):\par
00210             {\cf19 return}( {\cf22 "DHM - Making of the DHM parameters failed"} );\par
00211         {\cf19 case} -(MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED):\par
00212             {\cf19 return}( {\cf22 "DHM - Reading of the public values failed"} );\par
00213         {\cf19 case} -(MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED):\par
00214             {\cf19 return}( {\cf22 "DHM - Making of the public value failed"} );\par
00215         {\cf19 case} -(MBEDTLS_ERR_DHM_CALC_SECRET_FAILED):\par
00216             {\cf19 return}( {\cf22 "DHM - Calculation of the DHM secret failed"} );\par
00217         {\cf19 case} -(MBEDTLS_ERR_DHM_INVALID_FORMAT):\par
00218             {\cf19 return}( {\cf22 "DHM - The ASN.1 data is not formatted correctly"} );\par
00219         {\cf19 case} -(MBEDTLS_ERR_DHM_ALLOC_FAILED):\par
00220             {\cf19 return}( {\cf22 "DHM - Allocation of memory failed"} );\par
00221         {\cf19 case} -(MBEDTLS_ERR_DHM_FILE_IO_ERROR):\par
00222             {\cf19 return}( {\cf22 "DHM - Read or write of file failed"} );\par
00223         {\cf19 case} -(MBEDTLS_ERR_DHM_SET_GROUP_FAILED):\par
00224             {\cf19 return}( {\cf22 "DHM - Setting the modulus and generator failed"} );\par
00225 {\cf21 #endif }{\cf20 /* MBEDTLS_DHM_C */}{\cf21 }\par
00226 \par
00227 {\cf21 #if defined(MBEDTLS_ECP_C)}\par
00228         {\cf19 case} -(MBEDTLS_ERR_ECP_BAD_INPUT_DATA):\par
00229             {\cf19 return}( {\cf22 "ECP - Bad input parameters to function"} );\par
00230         {\cf19 case} -(MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL):\par
00231             {\cf19 return}( {\cf22 "ECP - The buffer is too small to write to"} );\par
00232         {\cf19 case} -(MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE):\par
00233             {\cf19 return}( {\cf22 "ECP - The requested feature is not available, for example, the requested curve is not supported"} );\par
00234         {\cf19 case} -(MBEDTLS_ERR_ECP_VERIFY_FAILED):\par
00235             {\cf19 return}( {\cf22 "ECP - The signature is not valid"} );\par
00236         {\cf19 case} -(MBEDTLS_ERR_ECP_ALLOC_FAILED):\par
00237             {\cf19 return}( {\cf22 "ECP - Memory allocation failed"} );\par
00238         {\cf19 case} -(MBEDTLS_ERR_ECP_RANDOM_FAILED):\par
00239             {\cf19 return}( {\cf22 "ECP - Generation of random value, such as ephemeral key, failed"} );\par
00240         {\cf19 case} -(MBEDTLS_ERR_ECP_INVALID_KEY):\par
00241             {\cf19 return}( {\cf22 "ECP - Invalid private or public key"} );\par
00242         {\cf19 case} -(MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH):\par
00243             {\cf19 return}( {\cf22 "ECP - The buffer contains a valid signature followed by more data"} );\par
00244         {\cf19 case} -(MBEDTLS_ERR_ECP_IN_PROGRESS):\par
00245             {\cf19 return}( {\cf22 "ECP - Operation in progress, call again with the same parameters to continue"} );\par
00246 {\cf21 #endif }{\cf20 /* MBEDTLS_ECP_C */}{\cf21 }\par
00247 \par
00248 {\cf21 #if defined(MBEDTLS_MD_C)}\par
00249         {\cf19 case} -(MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE):\par
00250             {\cf19 return}( {\cf22 "MD - The selected feature is not available"} );\par
00251         {\cf19 case} -(MBEDTLS_ERR_MD_BAD_INPUT_DATA):\par
00252             {\cf19 return}( {\cf22 "MD - Bad input parameters to function"} );\par
00253         {\cf19 case} -(MBEDTLS_ERR_MD_ALLOC_FAILED):\par
00254             {\cf19 return}( {\cf22 "MD - Failed to allocate memory"} );\par
00255         {\cf19 case} -(MBEDTLS_ERR_MD_FILE_IO_ERROR):\par
00256             {\cf19 return}( {\cf22 "MD - Opening or reading of file failed"} );\par
00257 {\cf21 #endif }{\cf20 /* MBEDTLS_MD_C */}{\cf21 }\par
00258 \par
00259 {\cf21 #if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)}\par
00260         {\cf19 case} -(MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT):\par
00261             {\cf19 return}( {\cf22 "PEM - No PEM header or footer found"} );\par
00262         {\cf19 case} -(MBEDTLS_ERR_PEM_INVALID_DATA):\par
00263             {\cf19 return}( {\cf22 "PEM - PEM string is not as expected"} );\par
00264         {\cf19 case} -(MBEDTLS_ERR_PEM_ALLOC_FAILED):\par
00265             {\cf19 return}( {\cf22 "PEM - Failed to allocate memory"} );\par
00266         {\cf19 case} -(MBEDTLS_ERR_PEM_INVALID_ENC_IV):\par
00267             {\cf19 return}( {\cf22 "PEM - RSA IV is not in hex-format"} );\par
00268         {\cf19 case} -(MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG):\par
00269             {\cf19 return}( {\cf22 "PEM - Unsupported key encryption algorithm"} );\par
00270         {\cf19 case} -(MBEDTLS_ERR_PEM_PASSWORD_REQUIRED):\par
00271             {\cf19 return}( {\cf22 "PEM - Private key password can't be empty"} );\par
00272         {\cf19 case} -(MBEDTLS_ERR_PEM_PASSWORD_MISMATCH):\par
00273             {\cf19 return}( {\cf22 "PEM - Given private key password does not allow for correct decryption"} );\par
00274         {\cf19 case} -(MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE):\par
00275             {\cf19 return}( {\cf22 "PEM - Unavailable feature, e.g. hashing/encryption combination"} );\par
00276         {\cf19 case} -(MBEDTLS_ERR_PEM_BAD_INPUT_DATA):\par
00277             {\cf19 return}( {\cf22 "PEM - Bad input parameters to function"} );\par
00278 {\cf21 #endif }{\cf20 /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */}{\cf21 }\par
00279 \par
00280 {\cf21 #if defined(MBEDTLS_PK_C)}\par
00281         {\cf19 case} -(MBEDTLS_ERR_PK_ALLOC_FAILED):\par
00282             {\cf19 return}( {\cf22 "PK - Memory allocation failed"} );\par
00283         {\cf19 case} -(MBEDTLS_ERR_PK_TYPE_MISMATCH):\par
00284             {\cf19 return}( {\cf22 "PK - Type mismatch, eg attempt to encrypt with an ECDSA key"} );\par
00285         {\cf19 case} -(MBEDTLS_ERR_PK_BAD_INPUT_DATA):\par
00286             {\cf19 return}( {\cf22 "PK - Bad input parameters to function"} );\par
00287         {\cf19 case} -(MBEDTLS_ERR_PK_FILE_IO_ERROR):\par
00288             {\cf19 return}( {\cf22 "PK - Read/write of file failed"} );\par
00289         {\cf19 case} -(MBEDTLS_ERR_PK_KEY_INVALID_VERSION):\par
00290             {\cf19 return}( {\cf22 "PK - Unsupported key version"} );\par
00291         {\cf19 case} -(MBEDTLS_ERR_PK_KEY_INVALID_FORMAT):\par
00292             {\cf19 return}( {\cf22 "PK - Invalid key tag or value"} );\par
00293         {\cf19 case} -(MBEDTLS_ERR_PK_UNKNOWN_PK_ALG):\par
00294             {\cf19 return}( {\cf22 "PK - Key algorithm is unsupported (only RSA and EC are supported)"} );\par
00295         {\cf19 case} -(MBEDTLS_ERR_PK_PASSWORD_REQUIRED):\par
00296             {\cf19 return}( {\cf22 "PK - Private key password can't be empty"} );\par
00297         {\cf19 case} -(MBEDTLS_ERR_PK_PASSWORD_MISMATCH):\par
00298             {\cf19 return}( {\cf22 "PK - Given private key password does not allow for correct decryption"} );\par
00299         {\cf19 case} -(MBEDTLS_ERR_PK_INVALID_PUBKEY):\par
00300             {\cf19 return}( {\cf22 "PK - The pubkey tag or value is invalid (only RSA and EC are supported)"} );\par
00301         {\cf19 case} -(MBEDTLS_ERR_PK_INVALID_ALG):\par
00302             {\cf19 return}( {\cf22 "PK - The algorithm tag or value is invalid"} );\par
00303         {\cf19 case} -(MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE):\par
00304             {\cf19 return}( {\cf22 "PK - Elliptic curve is unsupported (only NIST curves are supported)"} );\par
00305         {\cf19 case} -(MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE):\par
00306             {\cf19 return}( {\cf22 "PK - Unavailable feature, e.g. RSA disabled for RSA key"} );\par
00307         {\cf19 case} -(MBEDTLS_ERR_PK_SIG_LEN_MISMATCH):\par
00308             {\cf19 return}( {\cf22 "PK - The buffer contains a valid signature followed by more data"} );\par
00309         {\cf19 case} -(MBEDTLS_ERR_PK_BUFFER_TOO_SMALL):\par
00310             {\cf19 return}( {\cf22 "PK - The output buffer is too small"} );\par
00311 {\cf21 #endif }{\cf20 /* MBEDTLS_PK_C */}{\cf21 }\par
00312 \par
00313 {\cf21 #if defined(MBEDTLS_PKCS12_C)}\par
00314         {\cf19 case} -(MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA):\par
00315             {\cf19 return}( {\cf22 "PKCS12 - Bad input parameters to function"} );\par
00316         {\cf19 case} -(MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE):\par
00317             {\cf19 return}( {\cf22 "PKCS12 - Feature not available, e.g. unsupported encryption scheme"} );\par
00318         {\cf19 case} -(MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT):\par
00319             {\cf19 return}( {\cf22 "PKCS12 - PBE ASN.1 data not as expected"} );\par
00320         {\cf19 case} -(MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH):\par
00321             {\cf19 return}( {\cf22 "PKCS12 - Given private key password does not allow for correct decryption"} );\par
00322 {\cf21 #endif }{\cf20 /* MBEDTLS_PKCS12_C */}{\cf21 }\par
00323 \par
00324 {\cf21 #if defined(MBEDTLS_PKCS5_C)}\par
00325         {\cf19 case} -(MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA):\par
00326             {\cf19 return}( {\cf22 "PKCS5 - Bad input parameters to function"} );\par
00327         {\cf19 case} -(MBEDTLS_ERR_PKCS5_INVALID_FORMAT):\par
00328             {\cf19 return}( {\cf22 "PKCS5 - Unexpected ASN.1 data"} );\par
00329         {\cf19 case} -(MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE):\par
00330             {\cf19 return}( {\cf22 "PKCS5 - Requested encryption or digest alg not available"} );\par
00331         {\cf19 case} -(MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH):\par
00332             {\cf19 return}( {\cf22 "PKCS5 - Given private key password does not allow for correct decryption"} );\par
00333 {\cf21 #endif }{\cf20 /* MBEDTLS_PKCS5_C */}{\cf21 }\par
00334 \par
00335 {\cf21 #if defined(MBEDTLS_PKCS7_C)}\par
00336         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_FORMAT):\par
00337             {\cf19 return}( {\cf22 "PKCS7 - The format is invalid, e.g. different type expected"} );\par
00338         {\cf19 case} -(MBEDTLS_ERR_PKCS7_FEATURE_UNAVAILABLE):\par
00339             {\cf19 return}( {\cf22 "PKCS7 - Unavailable feature, e.g. anything other than signed data"} );\par
00340         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_VERSION):\par
00341             {\cf19 return}( {\cf22 "PKCS7 - The PKCS #7 version element is invalid or cannot be parsed"} );\par
00342         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_CONTENT_INFO):\par
00343             {\cf19 return}( {\cf22 "PKCS7 - The PKCS #7 content info is invalid or cannot be parsed"} );\par
00344         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_ALG):\par
00345             {\cf19 return}( {\cf22 "PKCS7 - The algorithm tag or value is invalid or cannot be parsed"} );\par
00346         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_CERT):\par
00347             {\cf19 return}( {\cf22 "PKCS7 - The certificate tag or value is invalid or cannot be parsed"} );\par
00348         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_SIGNATURE):\par
00349             {\cf19 return}( {\cf22 "PKCS7 - Error parsing the signature"} );\par
00350         {\cf19 case} -(MBEDTLS_ERR_PKCS7_INVALID_SIGNER_INFO):\par
00351             {\cf19 return}( {\cf22 "PKCS7 - Error parsing the signer's info"} );\par
00352         {\cf19 case} -(MBEDTLS_ERR_PKCS7_BAD_INPUT_DATA):\par
00353             {\cf19 return}( {\cf22 "PKCS7 - Input invalid"} );\par
00354         {\cf19 case} -(MBEDTLS_ERR_PKCS7_ALLOC_FAILED):\par
00355             {\cf19 return}( {\cf22 "PKCS7 - Allocation of memory failed"} );\par
00356         {\cf19 case} -(MBEDTLS_ERR_PKCS7_VERIFY_FAIL):\par
00357             {\cf19 return}( {\cf22 "PKCS7 - Verification Failed"} );\par
00358         {\cf19 case} -(MBEDTLS_ERR_PKCS7_CERT_DATE_INVALID):\par
00359             {\cf19 return}( {\cf22 "PKCS7 - The PKCS #7 date issued/expired dates are invalid"} );\par
00360 {\cf21 #endif }{\cf20 /* MBEDTLS_PKCS7_C */}{\cf21 }\par
00361 \par
00362 {\cf21 #if defined(MBEDTLS_RSA_C)}\par
00363         {\cf19 case} -(MBEDTLS_ERR_RSA_BAD_INPUT_DATA):\par
00364             {\cf19 return}( {\cf22 "RSA - Bad input parameters to function"} );\par
00365         {\cf19 case} -(MBEDTLS_ERR_RSA_INVALID_PADDING):\par
00366             {\cf19 return}( {\cf22 "RSA - Input data contains invalid padding and is rejected"} );\par
00367         {\cf19 case} -(MBEDTLS_ERR_RSA_KEY_GEN_FAILED):\par
00368             {\cf19 return}( {\cf22 "RSA - Something failed during generation of a key"} );\par
00369         {\cf19 case} -(MBEDTLS_ERR_RSA_KEY_CHECK_FAILED):\par
00370             {\cf19 return}( {\cf22 "RSA - Key failed to pass the validity check of the library"} );\par
00371         {\cf19 case} -(MBEDTLS_ERR_RSA_PUBLIC_FAILED):\par
00372             {\cf19 return}( {\cf22 "RSA - The public key operation failed"} );\par
00373         {\cf19 case} -(MBEDTLS_ERR_RSA_PRIVATE_FAILED):\par
00374             {\cf19 return}( {\cf22 "RSA - The private key operation failed"} );\par
00375         {\cf19 case} -(MBEDTLS_ERR_RSA_VERIFY_FAILED):\par
00376             {\cf19 return}( {\cf22 "RSA - The PKCS#1 verification failed"} );\par
00377         {\cf19 case} -(MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE):\par
00378             {\cf19 return}( {\cf22 "RSA - The output buffer for decryption is not large enough"} );\par
00379         {\cf19 case} -(MBEDTLS_ERR_RSA_RNG_FAILED):\par
00380             {\cf19 return}( {\cf22 "RSA - The random generator failed to generate non-zeros"} );\par
00381 {\cf21 #endif }{\cf20 /* MBEDTLS_RSA_C */}{\cf21 }\par
00382 \par
00383 {\cf21 #if defined(MBEDTLS_SSL_TLS_C)}\par
00384         {\cf19 case} -(MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS):\par
00385             {\cf19 return}( {\cf22 "SSL - A cryptographic operation is in progress. Try again later"} );\par
00386         {\cf19 case} -(MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE):\par
00387             {\cf19 return}( {\cf22 "SSL - The requested feature is not available"} );\par
00388         {\cf19 case} -(MBEDTLS_ERR_SSL_BAD_INPUT_DATA):\par
00389             {\cf19 return}( {\cf22 "SSL - Bad input parameters to function"} );\par
00390         {\cf19 case} -(MBEDTLS_ERR_SSL_INVALID_MAC):\par
00391             {\cf19 return}( {\cf22 "SSL - Verification of the message MAC failed"} );\par
00392         {\cf19 case} -(MBEDTLS_ERR_SSL_INVALID_RECORD):\par
00393             {\cf19 return}( {\cf22 "SSL - An invalid SSL record was received"} );\par
00394         {\cf19 case} -(MBEDTLS_ERR_SSL_CONN_EOF):\par
00395             {\cf19 return}( {\cf22 "SSL - The connection indicated an EOF"} );\par
00396         {\cf19 case} -(MBEDTLS_ERR_SSL_DECODE_ERROR):\par
00397             {\cf19 return}( {\cf22 "SSL - A message could not be parsed due to a syntactic error"} );\par
00398         {\cf19 case} -(MBEDTLS_ERR_SSL_NO_RNG):\par
00399             {\cf19 return}( {\cf22 "SSL - No RNG was provided to the SSL module"} );\par
00400         {\cf19 case} -(MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE):\par
00401             {\cf19 return}( {\cf22 "SSL - No client certification received from the client, but required by the authentication mode"} );\par
00402         {\cf19 case} -(MBEDTLS_ERR_SSL_UNSUPPORTED_EXTENSION):\par
00403             {\cf19 return}( {\cf22 "SSL - Client received an extended server hello containing an unsupported extension"} );\par
00404         {\cf19 case} -(MBEDTLS_ERR_SSL_NO_APPLICATION_PROTOCOL):\par
00405             {\cf19 return}( {\cf22 "SSL - No ALPN protocols supported that the client advertises"} );\par
00406         {\cf19 case} -(MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED):\par
00407             {\cf19 return}( {\cf22 "SSL - The own private key or pre-shared key is not set, but needed"} );\par
00408         {\cf19 case} -(MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED):\par
00409             {\cf19 return}( {\cf22 "SSL - No CA Chain is set, but required to operate"} );\par
00410         {\cf19 case} -(MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE):\par
00411             {\cf19 return}( {\cf22 "SSL - An unexpected message was received from our peer"} );\par
00412         {\cf19 case} -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE):\par
00413             {\cf19 return}( {\cf22 "SSL - A fatal alert message was received from our peer"} );\par
00414         {\cf19 case} -(MBEDTLS_ERR_SSL_UNRECOGNIZED_NAME):\par
00415             {\cf19 return}( {\cf22 "SSL - No server could be identified matching the client's SNI"} );\par
00416         {\cf19 case} -(MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY):\par
00417             {\cf19 return}( {\cf22 "SSL - The peer notified us that the connection is going to be closed"} );\par
00418         {\cf19 case} -(MBEDTLS_ERR_SSL_BAD_CERTIFICATE):\par
00419             {\cf19 return}( {\cf22 "SSL - Processing of the Certificate handshake message failed"} );\par
00420         {\cf19 case} -(MBEDTLS_ERR_SSL_RECEIVED_NEW_SESSION_TICKET):\par
00421             {\cf19 return}( {\cf22 "SSL - A TLS 1.3 NewSessionTicket message has been received"} );\par
00422         {\cf19 case} -(MBEDTLS_ERR_SSL_CANNOT_READ_EARLY_DATA):\par
00423             {\cf19 return}( {\cf22 "SSL - Not possible to read early data"} );\par
00424         {\cf19 case} -(MBEDTLS_ERR_SSL_RECEIVED_EARLY_DATA):\par
00425             {\cf19 return}( {\cf22 "SSL - * Early data has been received as part of an on-going handshake. This error code can be returned only on server side if and only if early data has been enabled by means of the mbedtls_ssl_conf_early_data() API. This error code can then be returned by mbedtls_ssl_handshake(), mbedtls_ssl_handshake_step(), mbedtls_ssl_read() or mbedtls_ssl_write() if early data has been received as part of the handshake sequence they triggered. To read the early data, call mbedtls_ssl_read_early_data()"} );\par
00426         {\cf19 case} -(MBEDTLS_ERR_SSL_CANNOT_WRITE_EARLY_DATA):\par
00427             {\cf19 return}( {\cf22 "SSL - Not possible to write early data"} );\par
00428         {\cf19 case} -(MBEDTLS_ERR_SSL_CACHE_ENTRY_NOT_FOUND):\par
00429             {\cf19 return}( {\cf22 "SSL - Cache entry not found"} );\par
00430         {\cf19 case} -(MBEDTLS_ERR_SSL_ALLOC_FAILED):\par
00431             {\cf19 return}( {\cf22 "SSL - Memory allocation failed"} );\par
00432         {\cf19 case} -(MBEDTLS_ERR_SSL_HW_ACCEL_FAILED):\par
00433             {\cf19 return}( {\cf22 "SSL - Hardware acceleration function returned with error"} );\par
00434         {\cf19 case} -(MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH):\par
00435             {\cf19 return}( {\cf22 "SSL - Hardware acceleration function skipped / left alone data"} );\par
00436         {\cf19 case} -(MBEDTLS_ERR_SSL_BAD_PROTOCOL_VERSION):\par
00437             {\cf19 return}( {\cf22 "SSL - Handshake protocol not within min/max boundaries"} );\par
00438         {\cf19 case} -(MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE):\par
00439             {\cf19 return}( {\cf22 "SSL - The handshake negotiation failed"} );\par
00440         {\cf19 case} -(MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED):\par
00441             {\cf19 return}( {\cf22 "SSL - Session ticket has expired"} );\par
00442         {\cf19 case} -(MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH):\par
00443             {\cf19 return}( {\cf22 "SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)"} );\par
00444         {\cf19 case} -(MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY):\par
00445             {\cf19 return}( {\cf22 "SSL - Unknown identity received (eg, PSK identity)"} );\par
00446         {\cf19 case} -(MBEDTLS_ERR_SSL_INTERNAL_ERROR):\par
00447             {\cf19 return}( {\cf22 "SSL - Internal error (eg, unexpected failure in lower-level module)"} );\par
00448         {\cf19 case} -(MBEDTLS_ERR_SSL_COUNTER_WRAPPING):\par
00449             {\cf19 return}( {\cf22 "SSL - A counter would wrap (eg, too many messages exchanged)"} );\par
00450         {\cf19 case} -(MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO):\par
00451             {\cf19 return}( {\cf22 "SSL - Unexpected message at ServerHello in renegotiation"} );\par
00452         {\cf19 case} -(MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED):\par
00453             {\cf19 return}( {\cf22 "SSL - DTLS client must retry for hello verification"} );\par
00454         {\cf19 case} -(MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL):\par
00455             {\cf19 return}( {\cf22 "SSL - A buffer is too small to receive or write a message"} );\par
00456         {\cf19 case} -(MBEDTLS_ERR_SSL_WANT_READ):\par
00457             {\cf19 return}( {\cf22 "SSL - No data of requested type currently available on underlying transport"} );\par
00458         {\cf19 case} -(MBEDTLS_ERR_SSL_WANT_WRITE):\par
00459             {\cf19 return}( {\cf22 "SSL - Connection requires a write call"} );\par
00460         {\cf19 case} -(MBEDTLS_ERR_SSL_TIMEOUT):\par
00461             {\cf19 return}( {\cf22 "SSL - The operation timed out"} );\par
00462         {\cf19 case} -(MBEDTLS_ERR_SSL_CLIENT_RECONNECT):\par
00463             {\cf19 return}( {\cf22 "SSL - The client initiated a reconnect from the same port"} );\par
00464         {\cf19 case} -(MBEDTLS_ERR_SSL_UNEXPECTED_RECORD):\par
00465             {\cf19 return}( {\cf22 "SSL - Record header looks valid but is not expected"} );\par
00466         {\cf19 case} -(MBEDTLS_ERR_SSL_NON_FATAL):\par
00467             {\cf19 return}( {\cf22 "SSL - The alert message received indicates a non-fatal error"} );\par
00468         {\cf19 case} -(MBEDTLS_ERR_SSL_ILLEGAL_PARAMETER):\par
00469             {\cf19 return}( {\cf22 "SSL - A field in a message was incorrect or inconsistent with other fields"} );\par
00470         {\cf19 case} -(MBEDTLS_ERR_SSL_CONTINUE_PROCESSING):\par
00471             {\cf19 return}( {\cf22 "SSL - Internal-only message signaling that further message-processing should be done"} );\par
00472         {\cf19 case} -(MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS):\par
00473             {\cf19 return}( {\cf22 "SSL - The asynchronous operation is not completed yet"} );\par
00474         {\cf19 case} -(MBEDTLS_ERR_SSL_EARLY_MESSAGE):\par
00475             {\cf19 return}( {\cf22 "SSL - Internal-only message signaling that a message arrived early"} );\par
00476         {\cf19 case} -(MBEDTLS_ERR_SSL_UNEXPECTED_CID):\par
00477             {\cf19 return}( {\cf22 "SSL - An encrypted DTLS-frame with an unexpected CID was received"} );\par
00478         {\cf19 case} -(MBEDTLS_ERR_SSL_VERSION_MISMATCH):\par
00479             {\cf19 return}( {\cf22 "SSL - An operation failed due to an unexpected version or configuration"} );\par
00480         {\cf19 case} -(MBEDTLS_ERR_SSL_BAD_CONFIG):\par
00481             {\cf19 return}( {\cf22 "SSL - Invalid value in SSL config"} );\par
00482         {\cf19 case} -(MBEDTLS_ERR_SSL_CERTIFICATE_VERIFICATION_WITHOUT_HOSTNAME):\par
00483             {\cf19 return}( {\cf22 "SSL - Attempt to verify a certificate without an expected hostname. This is usually insecure.  In TLS clients, when a client authenticates a server through its certificate, the client normally checks three things: - the certificate chain must be valid; - the chain must start from a trusted CA; - the certificate must cover the server name that is expected by the client.  Omitting any of these checks is generally insecure, and can allow a malicious server to impersonate a legitimate server.  The third check may be safely skipped in some unusual scenarios, such as networks where eavesdropping is a risk but not active attacks, or a private PKI where the client equally trusts all servers that are accredited by the root CA.  You should call mbedtls_ssl_set_hostname() with the expected server name before starting a TLS handshake on a client (unless the client is set up to only use PSK-based authentication, which does not rely on the host name). If you have determined that server name verification is not required for security in your scenario, call mbedtls_ssl_set_hostname() with \\\\p NULL as the server name.  This error is raised if all of the following conditions are met:  - A TLS client is configured with the authentication mode #MBEDTLS_SSL_VERIFY_REQUIRED (default). - Certificate authentication is enabled. - The client does not call mbedtls_ssl_set_hostname(). - The configuration option #MBEDTLS_SSL_CLI_ALLOW_WEAK_CERTIFICATE_VERIFICATION_WITHOUT_HOSTNAME is not enabled"} );\par
00484 {\cf21 #endif }{\cf20 /* MBEDTLS_SSL_TLS_C */}{\cf21 }\par
00485 \par
00486 {\cf21 #if defined(MBEDTLS_X509_USE_C) || defined(MBEDTLS_X509_CREATE_C)}\par
00487         {\cf19 case} -(MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE):\par
00488             {\cf19 return}( {\cf22 "X509 - Unavailable feature, e.g. RSA hashing/encryption combination"} );\par
00489         {\cf19 case} -(MBEDTLS_ERR_X509_UNKNOWN_OID):\par
00490             {\cf19 return}( {\cf22 "X509 - Requested OID is unknown"} );\par
00491         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_FORMAT):\par
00492             {\cf19 return}( {\cf22 "X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected"} );\par
00493         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_VERSION):\par
00494             {\cf19 return}( {\cf22 "X509 - The CRT/CRL/CSR version element is invalid"} );\par
00495         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_SERIAL):\par
00496             {\cf19 return}( {\cf22 "X509 - The serial tag or value is invalid"} );\par
00497         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_ALG):\par
00498             {\cf19 return}( {\cf22 "X509 - The algorithm tag or value is invalid"} );\par
00499         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_NAME):\par
00500             {\cf19 return}( {\cf22 "X509 - The name tag or value is invalid"} );\par
00501         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_DATE):\par
00502             {\cf19 return}( {\cf22 "X509 - The date tag or value is invalid"} );\par
00503         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_SIGNATURE):\par
00504             {\cf19 return}( {\cf22 "X509 - The signature tag or value invalid"} );\par
00505         {\cf19 case} -(MBEDTLS_ERR_X509_INVALID_EXTENSIONS):\par
00506             {\cf19 return}( {\cf22 "X509 - The extension tag or value is invalid"} );\par
00507         {\cf19 case} -(MBEDTLS_ERR_X509_UNKNOWN_VERSION):\par
00508             {\cf19 return}( {\cf22 "X509 - CRT/CRL/CSR has an unsupported version number"} );\par
00509         {\cf19 case} -(MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG):\par
00510             {\cf19 return}( {\cf22 "X509 - Signature algorithm (oid) is unsupported"} );\par
00511         {\cf19 case} -(MBEDTLS_ERR_X509_SIG_MISMATCH):\par
00512             {\cf19 return}( {\cf22 "X509 - Signature algorithms do not match. (see \\\\c ::mbedtls_x509_crt sig_oid)"} );\par
00513         {\cf19 case} -(MBEDTLS_ERR_X509_CERT_VERIFY_FAILED):\par
00514             {\cf19 return}( {\cf22 "X509 - Certificate verification failed, e.g. CRL, CA or signature check failed"} );\par
00515         {\cf19 case} -(MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT):\par
00516             {\cf19 return}( {\cf22 "X509 - Format not recognized as DER or PEM"} );\par
00517         {\cf19 case} -(MBEDTLS_ERR_X509_BAD_INPUT_DATA):\par
00518             {\cf19 return}( {\cf22 "X509 - Input invalid"} );\par
00519         {\cf19 case} -(MBEDTLS_ERR_X509_ALLOC_FAILED):\par
00520             {\cf19 return}( {\cf22 "X509 - Allocation of memory failed"} );\par
00521         {\cf19 case} -(MBEDTLS_ERR_X509_FILE_IO_ERROR):\par
00522             {\cf19 return}( {\cf22 "X509 - Read/write of file failed"} );\par
00523         {\cf19 case} -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL):\par
00524             {\cf19 return}( {\cf22 "X509 - Destination buffer is too small"} );\par
00525         {\cf19 case} -(MBEDTLS_ERR_X509_FATAL_ERROR):\par
00526             {\cf19 return}( {\cf22 "X509 - A fatal error occurred, eg the chain is too long or the vrfy callback failed"} );\par
00527 {\cf21 #endif }{\cf20 /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */}{\cf21 }\par
00528         {\cf20 /* End Auto-Generated Code. */}\par
00529 \par
00530         {\cf19 default}:\par
00531             {\cf19 break};\par
00532     \}\par
00533 \par
00534     {\cf19 return} NULL;\par
00535 \}\par
00536 \par
00537 {\cf17 const} {\cf18 char} *mbedtls_low_level_strerr({\cf18 int} error_code)\par
00538 \{\par
00539     {\cf18 int} low_level_error_code;\par
00540 \par
00541     {\cf19 if} (error_code < 0) \{\par
00542         error_code = -error_code;\par
00543     \}\par
00544 \par
00545     {\cf20 /* Extract the low-level part from the error code. */}\par
00546     low_level_error_code = error_code & ~0xFF80;\par
00547 \par
00548     {\cf19 switch} (low_level_error_code) \{\par
00549     {\cf20 /* Begin Auto-Generated Code. */}\par
00550 {\cf21     #if defined(MBEDTLS_AES_C)}\par
00551         {\cf19 case} -(MBEDTLS_ERR_AES_INVALID_KEY_LENGTH):\par
00552             return( {\cf22 "AES - Invalid key length"} );\par
00553         {\cf19 case} -(MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH):\par
00554             {\cf19 return}( {\cf22 "AES - Invalid data input length"} );\par
00555         {\cf19 case} -(MBEDTLS_ERR_AES_BAD_INPUT_DATA):\par
00556             {\cf19 return}( {\cf22 "AES - Invalid input data"} );\par
00557 {\cf21 #endif }{\cf20 /* MBEDTLS_AES_C */}{\cf21 }\par
00558 \par
00559 {\cf21 #if defined(MBEDTLS_ARIA_C)}\par
00560         {\cf19 case} -(MBEDTLS_ERR_ARIA_BAD_INPUT_DATA):\par
00561             {\cf19 return}( {\cf22 "ARIA - Bad input data"} );\par
00562         {\cf19 case} -(MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH):\par
00563             {\cf19 return}( {\cf22 "ARIA - Invalid data input length"} );\par
00564 {\cf21 #endif }{\cf20 /* MBEDTLS_ARIA_C */}{\cf21 }\par
00565 \par
00566 {\cf21 #if defined(MBEDTLS_ASN1_PARSE_C)}\par
00567         {\cf19 case} -(MBEDTLS_ERR_ASN1_OUT_OF_DATA):\par
00568             {\cf19 return}( {\cf22 "ASN1 - Out of data when parsing an ASN1 data structure"} );\par
00569         {\cf19 case} -(MBEDTLS_ERR_ASN1_UNEXPECTED_TAG):\par
00570             {\cf19 return}( {\cf22 "ASN1 - ASN1 tag was of an unexpected value"} );\par
00571         {\cf19 case} -(MBEDTLS_ERR_ASN1_INVALID_LENGTH):\par
00572             {\cf19 return}( {\cf22 "ASN1 - Error when trying to determine the length or invalid length"} );\par
00573         {\cf19 case} -(MBEDTLS_ERR_ASN1_LENGTH_MISMATCH):\par
00574             {\cf19 return}( {\cf22 "ASN1 - Actual length differs from expected length"} );\par
00575         {\cf19 case} -(MBEDTLS_ERR_ASN1_INVALID_DATA):\par
00576             {\cf19 return}( {\cf22 "ASN1 - Data is invalid"} );\par
00577         {\cf19 case} -(MBEDTLS_ERR_ASN1_ALLOC_FAILED):\par
00578             {\cf19 return}( {\cf22 "ASN1 - Memory allocation failed"} );\par
00579         {\cf19 case} -(MBEDTLS_ERR_ASN1_BUF_TOO_SMALL):\par
00580             {\cf19 return}( {\cf22 "ASN1 - Buffer too small when writing ASN.1 data structure"} );\par
00581 {\cf21 #endif }{\cf20 /* MBEDTLS_ASN1_PARSE_C */}{\cf21 }\par
00582 \par
00583 {\cf21 #if defined(MBEDTLS_BASE64_C)}\par
00584         {\cf19 case} -(MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL):\par
00585             {\cf19 return}( {\cf22 "BASE64 - Output buffer too small"} );\par
00586         {\cf19 case} -(MBEDTLS_ERR_BASE64_INVALID_CHARACTER):\par
00587             {\cf19 return}( {\cf22 "BASE64 - Invalid character in input"} );\par
00588 {\cf21 #endif }{\cf20 /* MBEDTLS_BASE64_C */}{\cf21 }\par
00589 \par
00590 {\cf21 #if defined(MBEDTLS_BIGNUM_C)}\par
00591         {\cf19 case} -(MBEDTLS_ERR_MPI_FILE_IO_ERROR):\par
00592             {\cf19 return}( {\cf22 "BIGNUM - An error occurred while reading from or writing to a file"} );\par
00593         {\cf19 case} -(MBEDTLS_ERR_MPI_BAD_INPUT_DATA):\par
00594             {\cf19 return}( {\cf22 "BIGNUM - Bad input parameters to function"} );\par
00595         {\cf19 case} -(MBEDTLS_ERR_MPI_INVALID_CHARACTER):\par
00596             {\cf19 return}( {\cf22 "BIGNUM - There is an invalid character in the digit string"} );\par
00597         {\cf19 case} -(MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL):\par
00598             {\cf19 return}( {\cf22 "BIGNUM - The buffer is too small to write to"} );\par
00599         {\cf19 case} -(MBEDTLS_ERR_MPI_NEGATIVE_VALUE):\par
00600             {\cf19 return}( {\cf22 "BIGNUM - The input arguments are negative or result in illegal output"} );\par
00601         {\cf19 case} -(MBEDTLS_ERR_MPI_DIVISION_BY_ZERO):\par
00602             {\cf19 return}( {\cf22 "BIGNUM - The input argument for division is zero, which is not allowed"} );\par
00603         {\cf19 case} -(MBEDTLS_ERR_MPI_NOT_ACCEPTABLE):\par
00604             {\cf19 return}( {\cf22 "BIGNUM - The input arguments are not acceptable"} );\par
00605         {\cf19 case} -(MBEDTLS_ERR_MPI_ALLOC_FAILED):\par
00606             {\cf19 return}( {\cf22 "BIGNUM - Memory allocation failed"} );\par
00607 {\cf21 #endif }{\cf20 /* MBEDTLS_BIGNUM_C */}{\cf21 }\par
00608 \par
00609 {\cf21 #if defined(MBEDTLS_CAMELLIA_C)}\par
00610         {\cf19 case} -(MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA):\par
00611             {\cf19 return}( {\cf22 "CAMELLIA - Bad input data"} );\par
00612         {\cf19 case} -(MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH):\par
00613             {\cf19 return}( {\cf22 "CAMELLIA - Invalid data input length"} );\par
00614 {\cf21 #endif }{\cf20 /* MBEDTLS_CAMELLIA_C */}{\cf21 }\par
00615 \par
00616 {\cf21 #if defined(MBEDTLS_CCM_C)}\par
00617         {\cf19 case} -(MBEDTLS_ERR_CCM_BAD_INPUT):\par
00618             {\cf19 return}( {\cf22 "CCM - Bad input parameters to the function"} );\par
00619         {\cf19 case} -(MBEDTLS_ERR_CCM_AUTH_FAILED):\par
00620             {\cf19 return}( {\cf22 "CCM - Authenticated decryption failed"} );\par
00621 {\cf21 #endif }{\cf20 /* MBEDTLS_CCM_C */}{\cf21 }\par
00622 \par
00623 {\cf21 #if defined(MBEDTLS_CHACHA20_C)}\par
00624         {\cf19 case} -(MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA):\par
00625             {\cf19 return}( {\cf22 "CHACHA20 - Invalid input parameter(s)"} );\par
00626 {\cf21 #endif }{\cf20 /* MBEDTLS_CHACHA20_C */}{\cf21 }\par
00627 \par
00628 {\cf21 #if defined(MBEDTLS_CHACHAPOLY_C)}\par
00629         {\cf19 case} -(MBEDTLS_ERR_CHACHAPOLY_BAD_STATE):\par
00630             {\cf19 return}( {\cf22 "CHACHAPOLY - The requested operation is not permitted in the current state"} );\par
00631         {\cf19 case} -(MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED):\par
00632             {\cf19 return}( {\cf22 "CHACHAPOLY - Authenticated decryption failed: data was not authentic"} );\par
00633 {\cf21 #endif }{\cf20 /* MBEDTLS_CHACHAPOLY_C */}{\cf21 }\par
00634 \par
00635 {\cf21 #if defined(MBEDTLS_CTR_DRBG_C)}\par
00636         {\cf19 case} -(MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED):\par
00637             {\cf19 return}( {\cf22 "CTR_DRBG - The entropy source failed"} );\par
00638         {\cf19 case} -(MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG):\par
00639             {\cf19 return}( {\cf22 "CTR_DRBG - The requested random buffer length is too big"} );\par
00640         {\cf19 case} -(MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG):\par
00641             {\cf19 return}( {\cf22 "CTR_DRBG - The input (entropy + additional data) is too large"} );\par
00642         {\cf19 case} -(MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR):\par
00643             {\cf19 return}( {\cf22 "CTR_DRBG - Read or write error in file"} );\par
00644 {\cf21 #endif }{\cf20 /* MBEDTLS_CTR_DRBG_C */}{\cf21 }\par
00645 \par
00646 {\cf21 #if defined(MBEDTLS_DES_C)}\par
00647         {\cf19 case} -(MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH):\par
00648             {\cf19 return}( {\cf22 "DES - The data input has an invalid length"} );\par
00649 {\cf21 #endif }{\cf20 /* MBEDTLS_DES_C */}{\cf21 }\par
00650 \par
00651 {\cf21 #if defined(MBEDTLS_ENTROPY_C)}\par
00652         {\cf19 case} -(MBEDTLS_ERR_ENTROPY_SOURCE_FAILED):\par
00653             {\cf19 return}( {\cf22 "ENTROPY - Critical entropy source failure"} );\par
00654         {\cf19 case} -(MBEDTLS_ERR_ENTROPY_MAX_SOURCES):\par
00655             {\cf19 return}( {\cf22 "ENTROPY - No more sources can be added"} );\par
00656         {\cf19 case} -(MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED):\par
00657             {\cf19 return}( {\cf22 "ENTROPY - No sources have been added to poll"} );\par
00658         {\cf19 case} -(MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE):\par
00659             {\cf19 return}( {\cf22 "ENTROPY - No strong sources have been added to poll"} );\par
00660         {\cf19 case} -(MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR):\par
00661             {\cf19 return}( {\cf22 "ENTROPY - Read/write error in file"} );\par
00662 {\cf21 #endif }{\cf20 /* MBEDTLS_ENTROPY_C */}{\cf21 }\par
00663 \par
00664 {\cf21 #if defined(MBEDTLS_ERROR_C)}\par
00665         {\cf19 case} -(MBEDTLS_ERR_ERROR_GENERIC_ERROR):\par
00666             {\cf19 return}( {\cf22 "ERROR - Generic error"} );\par
00667         {\cf19 case} -(MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED):\par
00668             {\cf19 return}( {\cf22 "ERROR - This is a bug in the library"} );\par
00669 {\cf21 #endif }{\cf20 /* MBEDTLS_ERROR_C */}{\cf21 }\par
00670 \par
00671 {\cf21 #if defined(MBEDTLS_PLATFORM_C)}\par
00672         {\cf19 case} -(MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED):\par
00673             {\cf19 return}( {\cf22 "PLATFORM - Hardware accelerator failed"} );\par
00674         {\cf19 case} -(MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED):\par
00675             {\cf19 return}( {\cf22 "PLATFORM - The requested feature is not supported by the platform"} );\par
00676 {\cf21 #endif }{\cf20 /* MBEDTLS_PLATFORM_C */}{\cf21 }\par
00677 \par
00678 {\cf21 #if defined(MBEDTLS_GCM_C)}\par
00679         {\cf19 case} -(MBEDTLS_ERR_GCM_AUTH_FAILED):\par
00680             {\cf19 return}( {\cf22 "GCM - Authenticated decryption failed"} );\par
00681         {\cf19 case} -(MBEDTLS_ERR_GCM_BAD_INPUT):\par
00682             {\cf19 return}( {\cf22 "GCM - Bad input parameters to function"} );\par
00683         {\cf19 case} -(MBEDTLS_ERR_GCM_BUFFER_TOO_SMALL):\par
00684             {\cf19 return}( {\cf22 "GCM - An output buffer is too small"} );\par
00685 {\cf21 #endif }{\cf20 /* MBEDTLS_GCM_C */}{\cf21 }\par
00686 \par
00687 {\cf21 #if defined(MBEDTLS_HKDF_C)}\par
00688         {\cf19 case} -(MBEDTLS_ERR_HKDF_BAD_INPUT_DATA):\par
00689             {\cf19 return}( {\cf22 "HKDF - Bad input parameters to function"} );\par
00690 {\cf21 #endif }{\cf20 /* MBEDTLS_HKDF_C */}{\cf21 }\par
00691 \par
00692 {\cf21 #if defined(MBEDTLS_HMAC_DRBG_C)}\par
00693         {\cf19 case} -(MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG):\par
00694             {\cf19 return}( {\cf22 "HMAC_DRBG - Too many random requested in single call"} );\par
00695         {\cf19 case} -(MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG):\par
00696             {\cf19 return}( {\cf22 "HMAC_DRBG - Input too large (Entropy + additional)"} );\par
00697         {\cf19 case} -(MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR):\par
00698             {\cf19 return}( {\cf22 "HMAC_DRBG - Read/write error in file"} );\par
00699         {\cf19 case} -(MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED):\par
00700             {\cf19 return}( {\cf22 "HMAC_DRBG - The entropy source failed"} );\par
00701 {\cf21 #endif }{\cf20 /* MBEDTLS_HMAC_DRBG_C */}{\cf21 }\par
00702 \par
00703 {\cf21 #if defined(MBEDTLS_LMS_C)}\par
00704         {\cf19 case} -(MBEDTLS_ERR_LMS_BAD_INPUT_DATA):\par
00705             {\cf19 return}( {\cf22 "LMS - Bad data has been input to an LMS function"} );\par
00706         {\cf19 case} -(MBEDTLS_ERR_LMS_OUT_OF_PRIVATE_KEYS):\par
00707             {\cf19 return}( {\cf22 "LMS - Specified LMS key has utilised all of its private keys"} );\par
00708         {\cf19 case} -(MBEDTLS_ERR_LMS_VERIFY_FAILED):\par
00709             {\cf19 return}( {\cf22 "LMS - LMS signature verification failed"} );\par
00710         {\cf19 case} -(MBEDTLS_ERR_LMS_ALLOC_FAILED):\par
00711             {\cf19 return}( {\cf22 "LMS - LMS failed to allocate space for a private key"} );\par
00712         {\cf19 case} -(MBEDTLS_ERR_LMS_BUFFER_TOO_SMALL):\par
00713             {\cf19 return}( {\cf22 "LMS - Input/output buffer is too small to contain requited data"} );\par
00714 {\cf21 #endif }{\cf20 /* MBEDTLS_LMS_C */}{\cf21 }\par
00715 \par
00716 {\cf21 #if defined(MBEDTLS_NET_C)}\par
00717         {\cf19 case} -(MBEDTLS_ERR_NET_SOCKET_FAILED):\par
00718             {\cf19 return}( {\cf22 "NET - Failed to open a socket"} );\par
00719         {\cf19 case} -(MBEDTLS_ERR_NET_CONNECT_FAILED):\par
00720             {\cf19 return}( {\cf22 "NET - The connection to the given server / port failed"} );\par
00721         {\cf19 case} -(MBEDTLS_ERR_NET_BIND_FAILED):\par
00722             {\cf19 return}( {\cf22 "NET - Binding of the socket failed"} );\par
00723         {\cf19 case} -(MBEDTLS_ERR_NET_LISTEN_FAILED):\par
00724             {\cf19 return}( {\cf22 "NET - Could not listen on the socket"} );\par
00725         {\cf19 case} -(MBEDTLS_ERR_NET_ACCEPT_FAILED):\par
00726             {\cf19 return}( {\cf22 "NET - Could not accept the incoming connection"} );\par
00727         {\cf19 case} -(MBEDTLS_ERR_NET_RECV_FAILED):\par
00728             {\cf19 return}( {\cf22 "NET - Reading information from the socket failed"} );\par
00729         {\cf19 case} -(MBEDTLS_ERR_NET_SEND_FAILED):\par
00730             {\cf19 return}( {\cf22 "NET - Sending information through the socket failed"} );\par
00731         {\cf19 case} -(MBEDTLS_ERR_NET_CONN_RESET):\par
00732             {\cf19 return}( {\cf22 "NET - Connection was reset by peer"} );\par
00733         {\cf19 case} -(MBEDTLS_ERR_NET_UNKNOWN_HOST):\par
00734             {\cf19 return}( {\cf22 "NET - Failed to get an IP address for the given hostname"} );\par
00735         {\cf19 case} -(MBEDTLS_ERR_NET_BUFFER_TOO_SMALL):\par
00736             {\cf19 return}( {\cf22 "NET - Buffer is too small to hold the data"} );\par
00737         {\cf19 case} -(MBEDTLS_ERR_NET_INVALID_CONTEXT):\par
00738             {\cf19 return}( {\cf22 "NET - The context is invalid, eg because it was free()ed"} );\par
00739         {\cf19 case} -(MBEDTLS_ERR_NET_POLL_FAILED):\par
00740             {\cf19 return}( {\cf22 "NET - Polling the net context failed"} );\par
00741         {\cf19 case} -(MBEDTLS_ERR_NET_BAD_INPUT_DATA):\par
00742             {\cf19 return}( {\cf22 "NET - Input invalid"} );\par
00743 {\cf21 #endif }{\cf20 /* MBEDTLS_NET_C */}{\cf21 }\par
00744 \par
00745 {\cf21 #if defined(MBEDTLS_OID_C)}\par
00746         {\cf19 case} -(MBEDTLS_ERR_OID_NOT_FOUND):\par
00747             {\cf19 return}( {\cf22 "OID - OID is not found"} );\par
00748         {\cf19 case} -(MBEDTLS_ERR_OID_BUF_TOO_SMALL):\par
00749             {\cf19 return}( {\cf22 "OID - output buffer is too small"} );\par
00750 {\cf21 #endif }{\cf20 /* MBEDTLS_OID_C */}{\cf21 }\par
00751 \par
00752 {\cf21 #if defined(MBEDTLS_POLY1305_C)}\par
00753         {\cf19 case} -(MBEDTLS_ERR_POLY1305_BAD_INPUT_DATA):\par
00754             {\cf19 return}( {\cf22 "POLY1305 - Invalid input parameter(s)"} );\par
00755 {\cf21 #endif }{\cf20 /* MBEDTLS_POLY1305_C */}{\cf21 }\par
00756 \par
00757 {\cf21 #if defined(MBEDTLS_SHA1_C)}\par
00758         {\cf19 case} -(MBEDTLS_ERR_SHA1_BAD_INPUT_DATA):\par
00759             {\cf19 return}( {\cf22 "SHA1 - SHA-1 input data was malformed"} );\par
00760 {\cf21 #endif }{\cf20 /* MBEDTLS_SHA1_C */}{\cf21 }\par
00761 \par
00762 {\cf21 #if defined(MBEDTLS_SHA256_C)}\par
00763         {\cf19 case} -(MBEDTLS_ERR_SHA256_BAD_INPUT_DATA):\par
00764             {\cf19 return}( {\cf22 "SHA256 - SHA-256 input data was malformed"} );\par
00765 {\cf21 #endif }{\cf20 /* MBEDTLS_SHA256_C */}{\cf21 }\par
00766 \par
00767 {\cf21 #if defined(MBEDTLS_SHA3_C)}\par
00768         {\cf19 case} -(MBEDTLS_ERR_SHA3_BAD_INPUT_DATA):\par
00769             {\cf19 return}( {\cf22 "SHA3 - SHA-3 input data was malformed"} );\par
00770 {\cf21 #endif }{\cf20 /* MBEDTLS_SHA3_C */}{\cf21 }\par
00771 \par
00772 {\cf21 #if defined(MBEDTLS_SHA512_C)}\par
00773         {\cf19 case} -(MBEDTLS_ERR_SHA512_BAD_INPUT_DATA):\par
00774             {\cf19 return}( {\cf22 "SHA512 - SHA-512 input data was malformed"} );\par
00775 {\cf21 #endif }{\cf20 /* MBEDTLS_SHA512_C */}{\cf21 }\par
00776 \par
00777 {\cf21 #if defined(MBEDTLS_THREADING_C)}\par
00778         {\cf19 case} -(MBEDTLS_ERR_THREADING_BAD_INPUT_DATA):\par
00779             {\cf19 return}( {\cf22 "THREADING - Bad input parameters to function"} );\par
00780         {\cf19 case} -(MBEDTLS_ERR_THREADING_MUTEX_ERROR):\par
00781             {\cf19 return}( {\cf22 "THREADING - Locking / unlocking / free failed with error code"} );\par
00782 {\cf21 #endif }{\cf20 /* MBEDTLS_THREADING_C */}{\cf21 }\par
00783         {\cf20 /* End Auto-Generated Code. */}\par
00784 \par
00785         {\cf19 default}:\par
00786             {\cf19 break};\par
00787     \}\par
00788 \par
00789     {\cf19 return} NULL;\par
00790 \}\par
00791 \par
00792 {\cf18 void} mbedtls_strerror({\cf18 int} ret, {\cf18 char} *buf, {\cf18 size_t} buflen)\par
00793 \{\par
00794     {\cf18 size_t} len;\par
00795     {\cf18 int} use_ret;\par
00796     {\cf17 const} {\cf18 char} *high_level_error_description = NULL;\par
00797     {\cf17 const} {\cf18 char} *low_level_error_description = NULL;\par
00798 \par
00799     {\cf19 if} (buflen == 0) \{\par
00800         {\cf19 return};\par
00801     \}\par
00802 \par
00803     memset(buf, 0x00, buflen);\par
00804 \par
00805     {\cf19 if} (ret < 0) \{\par
00806         ret = -ret;\par
00807     \}\par
00808 \par
00809     {\cf19 if} (ret & 0xFF80) \{\par
00810         use_ret = ret & 0xFF80;\par
00811 \par
00812         {\cf20 // Translate high level error code.}\par
00813         high_level_error_description = mbedtls_high_level_strerr(ret);\par
00814 \par
00815         {\cf19 if} (high_level_error_description == NULL) \{\par
00816             mbedtls_snprintf(buf, buflen, {\cf22 "UNKNOWN ERROR CODE (%04X)"}, ({\cf18 unsigned} {\cf18 int}) use_ret);\par
00817         \} {\cf19 else} \{\par
00818             mbedtls_snprintf(buf, buflen, {\cf22 "%s"}, high_level_error_description);\par
00819         \}\par
00820 \par
00821 {\cf21 #if defined(MBEDTLS_SSL_TLS_C)}\par
00822         {\cf20 // Early return in case of a fatal error - do not try to translate low}\par
00823         {\cf20 // level code.}\par
00824         {\cf19 if} (use_ret == -(MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE)) \{\par
00825             {\cf19 return};\par
00826         \}\par
00827 {\cf21 #endif }{\cf20 /* MBEDTLS_SSL_TLS_C */}{\cf21 }\par
00828     \}\par
00829 \par
00830     use_ret = ret & ~0xFF80;\par
00831 \par
00832     {\cf19 if} (use_ret == 0) \{\par
00833         {\cf19 return};\par
00834     \}\par
00835 \par
00836     {\cf20 // If high level code is present, make a concatenation between both}\par
00837     {\cf20 // error strings.}\par
00838     {\cf20 //}\par
00839     len = strlen(buf);\par
00840 \par
00841     {\cf19 if} (len > 0) \{\par
00842         {\cf19 if} (buflen - len < 5) \{\par
00843             {\cf19 return};\par
00844         \}\par
00845 \par
00846         mbedtls_snprintf(buf + len, buflen - len, {\cf22 " : "});\par
00847 \par
00848         buf += len + 3;\par
00849         buflen -= len + 3;\par
00850     \}\par
00851 \par
00852     {\cf20 // Translate low level error code.}\par
00853     low_level_error_description = mbedtls_low_level_strerr(ret);\par
00854 \par
00855     {\cf19 if} (low_level_error_description == NULL) \{\par
00856         mbedtls_snprintf(buf, buflen, {\cf22 "UNKNOWN ERROR CODE (%04X)"}, ({\cf18 unsigned} {\cf18 int}) use_ret);\par
00857     \} {\cf19 else} \{\par
00858         mbedtls_snprintf(buf, buflen, {\cf22 "%s"}, low_level_error_description);\par
00859     \}\par
00860 \}\par
00861 \par
00862 {\cf21 #else }{\cf20 /* MBEDTLS_ERROR_C */}{\cf21 }\par
00863 \par
00864 {\cf20 /*}\par
00865 {\cf20  * Provide a dummy implementation when MBEDTLS_ERROR_C is not defined}\par
00866 {\cf20  */}\par
00867 {\cf18 void} mbedtls_strerror({\cf18 int} ret, {\cf18 char} *buf, {\cf18 size_t} buflen)\par
00868 \{\par
00869     ((void) ret);\par
00870 \par
00871     {\cf19 if} (buflen > 0) \{\par
00872         buf[0] = {\cf23 '\\0'};\par
00873     \}\par
00874 \}\par
00875 \par
00876 {\cf21 #endif }{\cf20 /* MBEDTLS_ERROR_C */}{\cf21 }\par
00877 \par
00878 {\cf21 #endif }{\cf20 /* MBEDTLS_ERROR_C || MBEDTLS_ERROR_STRERROR_DUMMY */}{\cf21 }\par
}
}