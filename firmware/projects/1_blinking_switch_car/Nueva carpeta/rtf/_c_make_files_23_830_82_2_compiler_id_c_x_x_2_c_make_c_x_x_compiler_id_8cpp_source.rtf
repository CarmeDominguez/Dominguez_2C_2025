{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CMakeCXXCompilerId.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/carme/OneDrive/Desktop/cuarto/Electronica Programable/Repositorios/Dominguez_2C_2025/firmware/projects/1_blinking_switch_car/build/CMakeFiles/3.30.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}
{\xe \v C:/Users/carme/OneDrive/Desktop/cuarto/Electronica Programable/Repositorios/Dominguez_2C_2025/firmware/projects/1_blinking_switch_car/build/CMakeFiles/3.30.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Ir a la documentación de este archivo.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* This source file must have a .cpp extension so that all C++ compilers}\par
00002 {\cf20    recognize the extension without flags.  Borland does not know .cxx for}\par
00003 {\cf20    example.  */}\par
00004 {\cf21 #ifndef __cplusplus}\par
00005 {\cf21 # error "A C compiler has been selected for C++."}\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #if !defined(__has_include)}\par
00009 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00010 {\cf20    always no.  */}\par
00011 {\cf21 #  define __has_include(x) 0}\par
00012 {\cf21 #endif}\par
00013 \par
00014 \par
00015 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00016 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00017 \par
00018 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00019 {\cf21 # define COMPILER_ID "Intel"}\par
00020 {\cf21 # if defined(_MSC_VER)}\par
00021 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00022 {\cf21 # endif}\par
00023 {\cf21 # if defined(__GNUC__)}\par
00024 {\cf21 #  define SIMULATE_ID "GNU"}\par
00025 {\cf21 # endif}\par
00026   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00027 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00028 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00029 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00030 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00031 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00032 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00033 {\cf21 #  else}\par
00034 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00035 {\cf21 #  endif}\par
00036 {\cf21 # else}\par
00037 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00038 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00039    {\cf20 /* The third version component from --version is an update index,}\par
00040 {\cf20       but no macro is provided for it.  */}\par
00041 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00042 {\cf21 # endif}\par
00043 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00044    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00045 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00046 {\cf21 # endif}\par
00047 {\cf21 # if defined(_MSC_VER)}\par
00048    {\cf20 /* _MSC_VER = VVRR */}\par
00049 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00050 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00051 {\cf21 # endif}\par
00052 {\cf21 # if defined(__GNUC__)}\par
00053 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00054 {\cf21 # elif defined(__GNUG__)}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00056 {\cf21 # endif}\par
00057 {\cf21 # if defined(__GNUC_MINOR__)}\par
00058 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00059 {\cf21 # endif}\par
00060 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00062 {\cf21 # endif}\par
00063 \par
00064 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00065 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00066 {\cf21 #if defined(_MSC_VER)}\par
00067 {\cf21 # define SIMULATE_ID "MSVC"}\par
00068 {\cf21 #endif}\par
00069 {\cf21 #if defined(__GNUC__)}\par
00070 {\cf21 # define SIMULATE_ID "GNU"}\par
00071 {\cf21 #endif}\par
00072 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00073 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00074 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00075 {\cf20  */}\par
00076 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00077 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00078 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00079 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00080 {\cf21 #else}\par
00081 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00082 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00083 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00084 {\cf21 #endif}\par
00085 {\cf21 #if defined(_MSC_VER)}\par
00086   {\cf20 /* _MSC_VER = VVRR */}\par
00087 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00088 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00089 {\cf21 #endif}\par
00090 {\cf21 #if defined(__GNUC__)}\par
00091 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00092 {\cf21 #elif defined(__GNUG__)}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00094 {\cf21 #endif}\par
00095 {\cf21 #if defined(__GNUC_MINOR__)}\par
00096 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00097 {\cf21 #endif}\par
00098 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00099 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00100 {\cf21 #endif}\par
00101 \par
00102 {\cf21 #elif defined(__PATHCC__)}\par
00103 {\cf21 # define COMPILER_ID "PathScale"}\par
00104 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00105 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00106 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00107 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00108 {\cf21 # endif}\par
00109 \par
00110 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00111 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00112 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00113 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00114 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__)}\par
00117 {\cf21 # define COMPILER_ID "Borland"}\par
00118   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00119 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00120 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00121 \par
00122 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00123 {\cf21 # define COMPILER_ID "Watcom"}\par
00124    {\cf20 /* __WATCOMC__ = VVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00127 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00128 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00129 {\cf21 # endif}\par
00130 \par
00131 {\cf21 #elif defined(__WATCOMC__)}\par
00132 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00133    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00134 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00135 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00136 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00137 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00138 {\cf21 # endif}\par
00139 \par
00140 {\cf21 #elif defined(__SUNPRO_CC)}\par
00141 {\cf21 # define COMPILER_ID "SunPro"}\par
00142 {\cf21 # if __SUNPRO_CC >= 0x5100}\par
00143    {\cf20 /* __SUNPRO_CC = 0xVRRP */}\par
00144 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)}\par
00145 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)}\par
00146 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00147 {\cf21 # else}\par
00148    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00149 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)}\par
00150 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)}\par
00151 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00152 {\cf21 # endif}\par
00153 \par
00154 {\cf21 #elif defined(__HP_aCC)}\par
00155 {\cf21 # define COMPILER_ID "HP"}\par
00156   {\cf20 /* __HP_aCC = VVRRPP */}\par
00157 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)}\par
00158 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)}\par
00159 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)}\par
00160 \par
00161 {\cf21 #elif defined(__DECCXX)}\par
00162 {\cf21 # define COMPILER_ID "Compaq"}\par
00163   {\cf20 /* __DECCXX_VER = VVRRTPPPP */}\par
00164 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)}\par
00165 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)}\par
00166 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)}\par
00167 \par
00168 {\cf21 #elif defined(__IBMCPP__) && defined(__COMPILER_VER__)}\par
00169 {\cf21 # define COMPILER_ID "zOS"}\par
00170   {\cf20 /* __IBMCPP__ = VRP */}\par
00171 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00172 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00173 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00174 \par
00175 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00176 {\cf21 # define COMPILER_ID "IBMClang"}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00180 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00181 \par
00182 \par
00183 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00184 {\cf21 # define COMPILER_ID "XLClang"}\par
00185 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00186 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00187 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00188 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00189 \par
00190 \par
00191 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800}\par
00192 {\cf21 # define COMPILER_ID "XL"}\par
00193   {\cf20 /* __IBMCPP__ = VRP */}\par
00194 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00195 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00196 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00197 \par
00198 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800}\par
00199 {\cf21 # define COMPILER_ID "VisualAge"}\par
00200   {\cf20 /* __IBMCPP__ = VRP */}\par
00201 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00202 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00203 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00204 \par
00205 {\cf21 #elif defined(__NVCOMPILER)}\par
00206 {\cf21 # define COMPILER_ID "NVHPC"}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00209 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00210 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00211 {\cf21 # endif}\par
00212 \par
00213 {\cf21 #elif defined(__PGI)}\par
00214 {\cf21 # define COMPILER_ID "PGI"}\par
00215 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00216 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00217 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00218 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00219 {\cf21 # endif}\par
00220 \par
00221 {\cf21 #elif defined(__clang__) && defined(__cray__)}\par
00222 {\cf21 # define COMPILER_ID "CrayClang"}\par
00223 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__cray_major__)}\par
00224 {\cf21 # define COMPILER_VERSION_MINOR DEC(__cray_minor__)}\par
00225 {\cf21 # define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)}\par
00226 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00227 \par
00228 \par
00229 {\cf21 #elif defined(_CRAYC)}\par
00230 {\cf21 # define COMPILER_ID "Cray"}\par
00231 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00232 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00233 \par
00234 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00235 {\cf21 # define COMPILER_ID "TI"}\par
00236   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00237 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00238 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00239 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00240 \par
00241 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00242 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00243 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00244 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00245 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00246 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00247 \par
00248 \par
00249 {\cf21 #elif defined(__FUJITSU)}\par
00250 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00251 {\cf21 # if defined(__FCC_version__)}\par
00252 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00253 {\cf21 # elif defined(__FCC_major__)}\par
00254 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00255 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00256 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00257 {\cf21 # endif}\par
00258 {\cf21 # if defined(__fcc_version)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00260 {\cf21 # elif defined(__FCC_VERSION)}\par
00261 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00262 {\cf21 # endif}\par
00263 \par
00264 \par
00265 {\cf21 #elif defined(__ghs__)}\par
00266 {\cf21 # define COMPILER_ID "GHS"}\par
00267 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00268 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00269 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00270 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00271 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00272 {\cf21 # endif}\par
00273 \par
00274 {\cf21 #elif defined(__TASKING__)}\par
00275 {\cf21 # define COMPILER_ID "Tasking"}\par
00276 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00277 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00278 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00279 \par
00280 {\cf21 #elif defined(__ORANGEC__)}\par
00281 {\cf21 # define COMPILER_ID "OrangeC"}\par
00282 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)}\par
00283 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)}\par
00284 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)}\par
00285 \par
00286 {\cf21 #elif defined(__SCO_VERSION__)}\par
00287 {\cf21 # define COMPILER_ID "SCO"}\par
00288 \par
00289 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00290 {\cf21 # define COMPILER_ID "ARMCC"}\par
00291 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00292   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00293 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00294 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00295 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00296 {\cf21 #else}\par
00297   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00298 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00299 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00300 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00301 {\cf21 #endif}\par
00302 \par
00303 \par
00304 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00305 {\cf21 # define COMPILER_ID "AppleClang"}\par
00306 {\cf21 # if defined(_MSC_VER)}\par
00307 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00308 {\cf21 # endif}\par
00309 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00310 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00311 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00312 {\cf21 # if defined(_MSC_VER)}\par
00313    {\cf20 /* _MSC_VER = VVRR */}\par
00314 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00315 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00316 {\cf21 # endif}\par
00317 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00318 \par
00319 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00320 {\cf21 # define COMPILER_ID "ARMClang"}\par
00321 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00322 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00323 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)}\par
00324 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00325 \par
00326 {\cf21 #elif defined(__clang__) && defined(__ti__)}\par
00327 {\cf21 # define COMPILER_ID "TIClang"}\par
00328 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ti_major__)}\par
00329 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ti_minor__)}\par
00330 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)}\par
00331 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ti_version__)}\par
00332 \par
00333 {\cf21 #elif defined(__clang__)}\par
00334 {\cf21 # define COMPILER_ID "Clang"}\par
00335 {\cf21 # if defined(_MSC_VER)}\par
00336 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00337 {\cf21 # endif}\par
00338 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00339 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00340 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00341 {\cf21 # if defined(_MSC_VER)}\par
00342    {\cf20 /* _MSC_VER = VVRR */}\par
00343 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00344 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00345 {\cf21 # endif}\par
00346 \par
00347 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00348 {\cf21 # define COMPILER_ID "LCC"}\par
00349 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)}\par
00350 {\cf21 # define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)}\par
00351 {\cf21 # if defined(__LCC_MINOR__)}\par
00352 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00353 {\cf21 # endif}\par
00354 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00355 {\cf21 #  define SIMULATE_ID "GNU"}\par
00356 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00357 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00358 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00359 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00360 {\cf21 #  endif}\par
00361 {\cf21 # endif}\par
00362 \par
00363 {\cf21 #elif defined(__GNUC__) || defined(__GNUG__)}\par
00364 {\cf21 # define COMPILER_ID "GNU"}\par
00365 {\cf21 # if defined(__GNUC__)}\par
00366 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00367 {\cf21 # else}\par
00368 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)}\par
00369 {\cf21 # endif}\par
00370 {\cf21 # if defined(__GNUC_MINOR__)}\par
00371 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00372 {\cf21 # endif}\par
00373 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00374 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00375 {\cf21 # endif}\par
00376 \par
00377 {\cf21 #elif defined(_MSC_VER)}\par
00378 {\cf21 # define COMPILER_ID "MSVC"}\par
00379   {\cf20 /* _MSC_VER = VVRR */}\par
00380 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00381 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00382 {\cf21 # if defined(_MSC_FULL_VER)}\par
00383 {\cf21 #  if _MSC_VER >= 1400}\par
00384     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00385 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00386 {\cf21 #  else}\par
00387     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00388 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00389 {\cf21 #  endif}\par
00390 {\cf21 # endif}\par
00391 {\cf21 # if defined(_MSC_BUILD)}\par
00392 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00393 {\cf21 # endif}\par
00394 \par
00395 {\cf21 #elif defined(_ADI_COMPILER)}\par
00396 {\cf21 # define COMPILER_ID "ADSP"}\par
00397 {\cf21 #if defined(__VERSIONNUM__)}\par
00398   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00399 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00400 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00401 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00402 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00403 {\cf21 #endif}\par
00404 \par
00405 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00406 {\cf21 # define COMPILER_ID "IAR"}\par
00407 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00408 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00409 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00410 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00411 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00412 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00413 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00414 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00415 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00416 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00417 {\cf21 # endif}\par
00418 \par
00419 \par
00420 {\cf20 /* These compilers are either not known or too old to define an}\par
00421 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00422 {\cf20   it is the native compiler.  */}\par
00423 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00424 {\cf21 # define COMPILER_ID "HP"}\par
00425 \par
00426 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00427 {\cf21 # define COMPILER_ID ""}\par
00428 {\cf21 #endif}\par
00429 \par
00430 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00431 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00432 {\cf20    because some compilers will just produce instructions to fill the}\par
00433 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00434 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00435 {\cf21 #ifdef SIMULATE_ID}\par
00436 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00437 {\cf21 #endif}\par
00438 \par
00439 {\cf21 #ifdef __QNXNTO__}\par
00440 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00441 {\cf21 #endif}\par
00442 \par
00443 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00444 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00445 {\cf21 #endif}\par
00446 \par
00447 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00448 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00449 \par
00450 {\cf20 /* Identify known platforms by name.  */}\par
00451 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00452 {\cf21 # define PLATFORM_ID "Linux"}\par
00453 \par
00454 {\cf21 #elif defined(__MSYS__)}\par
00455 {\cf21 # define PLATFORM_ID "MSYS"}\par
00456 \par
00457 {\cf21 #elif defined(__CYGWIN__)}\par
00458 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00459 \par
00460 {\cf21 #elif defined(__MINGW32__)}\par
00461 {\cf21 # define PLATFORM_ID "MinGW"}\par
00462 \par
00463 {\cf21 #elif defined(__APPLE__)}\par
00464 {\cf21 # define PLATFORM_ID "Darwin"}\par
00465 \par
00466 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00467 {\cf21 # define PLATFORM_ID "Windows"}\par
00468 \par
00469 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00470 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00471 \par
00472 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00473 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00474 \par
00475 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00476 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00477 \par
00478 {\cf21 #elif defined(__sun) || defined(sun)}\par
00479 {\cf21 # define PLATFORM_ID "SunOS"}\par
00480 \par
00481 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00482 {\cf21 # define PLATFORM_ID "AIX"}\par
00483 \par
00484 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00485 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00486 \par
00487 {\cf21 #elif defined(__HAIKU__)}\par
00488 {\cf21 # define PLATFORM_ID "Haiku"}\par
00489 \par
00490 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00491 {\cf21 # define PLATFORM_ID "BeOS"}\par
00492 \par
00493 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00494 {\cf21 # define PLATFORM_ID "QNX"}\par
00495 \par
00496 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00497 {\cf21 # define PLATFORM_ID "Tru64"}\par
00498 \par
00499 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00500 {\cf21 # define PLATFORM_ID "RISCos"}\par
00501 \par
00502 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00503 {\cf21 # define PLATFORM_ID "SINIX"}\par
00504 \par
00505 {\cf21 #elif defined(__UNIX_SV__)}\par
00506 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00507 \par
00508 {\cf21 #elif defined(__bsdos__)}\par
00509 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00510 \par
00511 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00512 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00513 \par
00514 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00515 {\cf21 # define PLATFORM_ID "OSF1"}\par
00516 \par
00517 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00518 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00519 \par
00520 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00521 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00522 \par
00523 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00524 {\cf21 # define PLATFORM_ID "Xenix"}\par
00525 \par
00526 {\cf21 #elif defined(__WATCOMC__)}\par
00527 {\cf21 # if defined(__LINUX__)}\par
00528 {\cf21 #  define PLATFORM_ID "Linux"}\par
00529 \par
00530 {\cf21 # elif defined(__DOS__)}\par
00531 {\cf21 #  define PLATFORM_ID "DOS"}\par
00532 \par
00533 {\cf21 # elif defined(__OS2__)}\par
00534 {\cf21 #  define PLATFORM_ID "OS2"}\par
00535 \par
00536 {\cf21 # elif defined(__WINDOWS__)}\par
00537 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00538 \par
00539 {\cf21 # elif defined(__VXWORKS__)}\par
00540 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00541 \par
00542 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00543 {\cf21 #  define PLATFORM_ID}\par
00544 {\cf21 # endif}\par
00545 \par
00546 {\cf21 #elif defined(__INTEGRITY)}\par
00547 {\cf21 # if defined(INT_178B)}\par
00548 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00549 \par
00550 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00551 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00552 {\cf21 # endif}\par
00553 \par
00554 {\cf21 # elif defined(_ADI_COMPILER)}\par
00555 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00556 \par
00557 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00558 {\cf21 # define PLATFORM_ID}\par
00559 \par
00560 {\cf21 #endif}\par
00561 \par
00562 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00563 {\cf20    the architecture of the compiler being used.  This is because}\par
00564 {\cf20    the compilers do not have flags that can change the architecture,}\par
00565 {\cf20    but rather depend on which compiler is being used}\par
00566 {\cf20 */}\par
00567 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00568 {\cf21 # if defined(_M_IA64)}\par
00569 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00570 \par
00571 {\cf21 # elif defined(_M_ARM64EC)}\par
00572 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00573 \par
00574 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00575 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00576 \par
00577 {\cf21 # elif defined(_M_IX86)}\par
00578 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00579 \par
00580 {\cf21 # elif defined(_M_ARM64)}\par
00581 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00582 \par
00583 {\cf21 # elif defined(_M_ARM)}\par
00584 {\cf21 #  if _M_ARM == 4}\par
00585 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00586 {\cf21 #  elif _M_ARM == 5}\par
00587 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00588 {\cf21 #  else}\par
00589 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00590 {\cf21 #  endif}\par
00591 \par
00592 {\cf21 # elif defined(_M_MIPS)}\par
00593 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00594 \par
00595 {\cf21 # elif defined(_M_SH)}\par
00596 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00597 \par
00598 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00599 {\cf21 #  define ARCHITECTURE_ID ""}\par
00600 {\cf21 # endif}\par
00601 \par
00602 {\cf21 #elif defined(__WATCOMC__)}\par
00603 {\cf21 # if defined(_M_I86)}\par
00604 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00605 \par
00606 {\cf21 # elif defined(_M_IX86)}\par
00607 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00608 \par
00609 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00610 {\cf21 #  define ARCHITECTURE_ID ""}\par
00611 {\cf21 # endif}\par
00612 \par
00613 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00614 {\cf21 # if defined(__ICCARM__)}\par
00615 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00616 \par
00617 {\cf21 # elif defined(__ICCRX__)}\par
00618 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00619 \par
00620 {\cf21 # elif defined(__ICCRH850__)}\par
00621 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00622 \par
00623 {\cf21 # elif defined(__ICCRL78__)}\par
00624 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00625 \par
00626 {\cf21 # elif defined(__ICCRISCV__)}\par
00627 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00628 \par
00629 {\cf21 # elif defined(__ICCAVR__)}\par
00630 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00631 \par
00632 {\cf21 # elif defined(__ICC430__)}\par
00633 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00634 \par
00635 {\cf21 # elif defined(__ICCV850__)}\par
00636 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00637 \par
00638 {\cf21 # elif defined(__ICC8051__)}\par
00639 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00640 \par
00641 {\cf21 # elif defined(__ICCSTM8__)}\par
00642 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00643 \par
00644 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00645 {\cf21 #  define ARCHITECTURE_ID ""}\par
00646 {\cf21 # endif}\par
00647 \par
00648 {\cf21 #elif defined(__ghs__)}\par
00649 {\cf21 # if defined(__PPC64__)}\par
00650 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00651 \par
00652 {\cf21 # elif defined(__ppc__)}\par
00653 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00654 \par
00655 {\cf21 # elif defined(__ARM__)}\par
00656 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00657 \par
00658 {\cf21 # elif defined(__x86_64__)}\par
00659 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00660 \par
00661 {\cf21 # elif defined(__i386__)}\par
00662 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00663 \par
00664 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00665 {\cf21 #  define ARCHITECTURE_ID ""}\par
00666 {\cf21 # endif}\par
00667 \par
00668 {\cf21 #elif defined(__clang__) && defined(__ti__)}\par
00669 {\cf21 # if defined(__ARM_ARCH)}\par
00670 {\cf21 #  define ARCHITECTURE_ID "Arm"}\par
00671 \par
00672 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00673 {\cf21 #  define ARCHITECTURE_ID ""}\par
00674 {\cf21 # endif}\par
00675 \par
00676 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00677 {\cf21 # if defined(__TI_ARM__)}\par
00678 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00679 \par
00680 {\cf21 # elif defined(__MSP430__)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00682 \par
00683 {\cf21 # elif defined(__TMS320C28XX__)}\par
00684 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00685 \par
00686 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00687 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00688 \par
00689 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00690 {\cf21 #  define ARCHITECTURE_ID ""}\par
00691 {\cf21 # endif}\par
00692 \par
00693 {\cf21 # elif defined(__ADSPSHARC__)}\par
00694 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00695 \par
00696 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00697 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00698 \par
00699 {\cf21 #elif defined(__TASKING__)}\par
00700 \par
00701 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00703 \par
00704 {\cf21 # elif defined(__CMCS__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00706 \par
00707 {\cf21 # elif defined(__CARM__)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00709 \par
00710 {\cf21 # elif defined(__CARC__)}\par
00711 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00712 \par
00713 {\cf21 # elif defined(__C51__)}\par
00714 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00715 \par
00716 {\cf21 # elif defined(__CPCP__)}\par
00717 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00718 \par
00719 {\cf21 # else}\par
00720 {\cf21 #  define ARCHITECTURE_ID ""}\par
00721 {\cf21 # endif}\par
00722 \par
00723 {\cf21 #else}\par
00724 {\cf21 #  define ARCHITECTURE_ID}\par
00725 {\cf21 #endif}\par
00726 \par
00727 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00728 {\cf21 #define DEC(n)                   \\}\par
00729 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00730 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00731 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00732 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00733 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00734 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00735 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00736 {\cf21   ('0' +  ((n) % 10))}\par
00737 \par
00738 {\cf20 /* Convert integer to hex digit literals.  */}\par
00739 {\cf21 #define HEX(n)             \\}\par
00740 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00741 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00742 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00743 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00744 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00745 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00746 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00747 {\cf21   ('0' + ((n)     & 0xF))}\par
00748 \par
00749 {\cf20 /* Construct a string literal encoding the version number. */}\par
00750 {\cf21 #ifdef COMPILER_VERSION}\par
00751 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00752 \par
00753 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00754 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00755 {\cf18 char} {\cf17 const} info_version[] = \{\par
00756   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00757   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00758   COMPILER_VERSION_MAJOR,\par
00759 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00760   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00761 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00762    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00763 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00764     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00765 {\cf21 #   endif}\par
00766 {\cf21 #  endif}\par
00767 {\cf21 # endif}\par
00768   {\cf23 ']'},{\cf23 '\\0'}\};\par
00769 {\cf21 #endif}\par
00770 \par
00771 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00772 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00773 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00774   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00775   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00776   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00777   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00778 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00779 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00780 {\cf21 #endif}\par
00781 \par
00782 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00783 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00784 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00785   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00786   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00787   SIMULATE_VERSION_MAJOR,\par
00788 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00789   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00790 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00791    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00792 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00793     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00794 {\cf21 #   endif}\par
00795 {\cf21 #  endif}\par
00796 {\cf21 # endif}\par
00797   {\cf23 ']'},{\cf23 '\\0'}\};\par
00798 {\cf21 #endif}\par
00799 \par
00800 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00801 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00802 {\cf20    because some compilers will just produce instructions to fill the}\par
00803 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00804 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00805 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00806 \par
00807 \par
00808 \par
00809 {\cf21 #define CXX_STD_98 199711L}\par
00810 {\cf21 #define CXX_STD_11 201103L}\par
00811 {\cf21 #define CXX_STD_14 201402L}\par
00812 {\cf21 #define CXX_STD_17 201703L}\par
00813 {\cf21 #define CXX_STD_20 202002L}\par
00814 {\cf21 #define CXX_STD_23 202302L}\par
00815 \par
00816 {\cf21 #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)}\par
00817 {\cf21 #  if _MSVC_LANG > CXX_STD_17}\par
00818 {\cf21 #    define CXX_STD _MSVC_LANG}\par
00819 {\cf21 #  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)}\par
00820 {\cf21 #    define CXX_STD CXX_STD_20}\par
00821 {\cf21 #  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17}\par
00822 {\cf21 #    define CXX_STD CXX_STD_20}\par
00823 {\cf21 #  elif _MSVC_LANG > CXX_STD_14}\par
00824 {\cf21 #    define CXX_STD CXX_STD_17}\par
00825 {\cf21 #  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)}\par
00826 {\cf21 #    define CXX_STD CXX_STD_14}\par
00827 {\cf21 #  elif defined(__INTEL_CXX11_MODE__)}\par
00828 {\cf21 #    define CXX_STD CXX_STD_11}\par
00829 {\cf21 #  else}\par
00830 {\cf21 #    define CXX_STD CXX_STD_98}\par
00831 {\cf21 #  endif}\par
00832 {\cf21 #elif defined(_MSC_VER) && defined(_MSVC_LANG)}\par
00833 {\cf21 #  if _MSVC_LANG > __cplusplus}\par
00834 {\cf21 #    define CXX_STD _MSVC_LANG}\par
00835 {\cf21 #  else}\par
00836 {\cf21 #    define CXX_STD __cplusplus}\par
00837 {\cf21 #  endif}\par
00838 {\cf21 #elif defined(__NVCOMPILER)}\par
00839 {\cf21 #  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)}\par
00840 {\cf21 #    define CXX_STD CXX_STD_20}\par
00841 {\cf21 #  else}\par
00842 {\cf21 #    define CXX_STD __cplusplus}\par
00843 {\cf21 #  endif}\par
00844 {\cf21 #elif defined(__INTEL_COMPILER) || defined(__PGI)}\par
00845 {\cf21 #  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)}\par
00846 {\cf21 #    define CXX_STD CXX_STD_17}\par
00847 {\cf21 #  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)}\par
00848 {\cf21 #    define CXX_STD CXX_STD_14}\par
00849 {\cf21 #  else}\par
00850 {\cf21 #    define CXX_STD __cplusplus}\par
00851 {\cf21 #  endif}\par
00852 {\cf21 #elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)}\par
00853 {\cf21 #  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)}\par
00854 {\cf21 #    define CXX_STD CXX_STD_14}\par
00855 {\cf21 #  else}\par
00856 {\cf21 #    define CXX_STD __cplusplus}\par
00857 {\cf21 #  endif}\par
00858 {\cf21 #elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)}\par
00859 {\cf21 #  define CXX_STD CXX_STD_11}\par
00860 {\cf21 #else}\par
00861 {\cf21 #  define CXX_STD __cplusplus}\par
00862 {\cf21 #endif}\par
00863 \par
00864 {\cf17 const} {\cf18 char}* info_language_standard_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
00865 {\cf21 #if CXX_STD > CXX_STD_23}\par
00866   {\cf22 "26"}\par
00867 {\cf21 #elif CXX_STD > CXX_STD_20}\par
00868   {\cf22 "23"}\par
00869 {\cf21 #elif CXX_STD > CXX_STD_17}\par
00870   {\cf22 "20"}\par
00871 {\cf21 #elif CXX_STD > CXX_STD_14}\par
00872   {\cf22 "17"}\par
00873 {\cf21 #elif CXX_STD > CXX_STD_11}\par
00874   {\cf22 "14"}\par
00875 {\cf21 #elif CXX_STD >= CXX_STD_11}\par
00876   {\cf22 "11"}\par
00877 {\cf21 #else}\par
00878   {\cf22 "98"}\par
00879 {\cf21 #endif}\par
00880 {\cf22 "]"};\par
00881 \par
00882 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00883 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00884 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00885 {\cf21   !defined(__STRICT_ANSI__)}\par
00886   {\cf22 "ON"}\par
00887 {\cf21 #else}\par
00888   {\cf22 "OFF"}\par
00889 {\cf21 #endif}\par
00890 {\cf22 "]"};\par
00891 \par
00892 {\cf20 /*--------------------------------------------------------------------------*/}\par
00893 \par
00894 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00895 \{\par
00896   {\cf18 int} require = 0;\par
00897   require += info_compiler[argc];\par
00898   require += info_platform[argc];\par
00899   require += info_arch[argc];\par
00900 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00901   require += info_version[argc];\par
00902 {\cf21 #endif}\par
00903 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00904   require += info_version_internal[argc];\par
00905 {\cf21 #endif}\par
00906 {\cf21 #ifdef SIMULATE_ID}\par
00907   require += info_simulate[argc];\par
00908 {\cf21 #endif}\par
00909 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00910   require += info_simulate_version[argc];\par
00911 {\cf21 #endif}\par
00912 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00913   require += info_cray[argc];\par
00914 {\cf21 #endif}\par
00915   require += info_language_standard_default[argc];\par
00916   require += info_language_extensions_default[argc];\par
00917   (void)argv;\par
00918   {\cf19 return} require;\par
00919 \}\par
}
}